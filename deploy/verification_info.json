{
  "standard_json_input": {
    "language": "Solidity",
    "sources": {
      "veRVRS.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"ReentrancyGuardUpgradeable.sol\";\nimport \"PausableUpgradeable.sol\";\nimport \"OwnableUpgradeable.sol\";\nimport \"Initializable.sol\";\nimport \"SafeERC20.sol\";\nimport \"SafeMath.sol\";\nimport \"VeERC20Upgradeable.sol\";\nimport \"IMasterchef.sol\";\nimport \"IVeRvrs.sol\";\n\n/// @title VeRvrs\n/// @notice RVRS: the staking contract for RVRS, as well as the token used for governance.\n/// Here are the rules of the game:\n/// If you stake RVRS, you generate veRvrs at the current `generationRate` until you reach `maxCap`\n/// If you unstake any amount of rvrs, you loose all of your veRvrs.\n/// Note that it's ownable and the owner wields tremendous power. The ownership\n/// will be transferred to a governance smart contract once Rvrs is sufficiently\n/// distributed and the community can show to govern itself.\ncontract VeRvrs is\nInitializable,\nOwnableUpgradeable,\nReentrancyGuardUpgradeable,\nPausableUpgradeable,\nVeERC20Upgradeable,\nIVeRvrs\n{\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    struct UserInfo {\n        uint256 amount; // rvrs staked by user\n        uint256 rewardDebt;\n        uint256 rewardDebtVeRvrs;\n        uint256 lastClaim; // time of last claim or first deposit if user has not claimed yet\n        uint256 lastDeposit; // time of last deposit\n    }\n\n    /// @notice the rvrs token\n    IERC20 public rvrs;\n    address public rvrsDAO;\n\n    /// @notice the masterchef contract\n    IMasterchef public masterchef;\n\n    /// @notice max veRvrs to staked rvrs ratio\n    /// Note if user has 10 rvrs staked, they can only have a max of 10 * maxCap veRvrs in balance\n    uint256 public maxCap;\n\n    /// @notice Total reverse staked\n    uint256 public totalStaked;\n    uint256 public totalRewardsClaimed;\n    uint256 public lastRewardTime;\n    uint256 public accRewardPerShare; // for RVRS\n    uint256 public accRewardPerVeShare; // for veRVRS\n    uint256 private constant ACC_REWARD_PRECISION = 1e18;\n\n    uint256 public initialDepositMint; // in bips 50 = 0.5%\n    uint256 public withdrawFee; // in bips\n    uint256 public constant  MAX_WITHDRAW_FEE = 2000; // 20%\n    uint256 public withdrawFeeTime;\n    uint256 public constant  MAX_WITHDRAW_FEE_TIME = 90 days;\n    uint256 public pid; // pid for custom token masterchef pool\n\n    /// @notice This is so we can set a warmup period with no rewards\n    bool public rewardsStarted = false;\n\n    /// @notice the rate of veRvrs generated per second, per rvrs staked\n    /// @dev to figure out days to cap, the formula is:\n    ///      maxCap * 1e18 / generationRate / 60 / 60 / 24\n    /// @dev to reverse engineer generation rate to target a nDays to cap:\n    ///      generationRate = maxCap * 1e18 / nDays / 60 / 60 / 24\n    uint256 public generationRate;\n    uint256 public constant MAX_GENERATION_RATE = 38580246913500;\n\n    /// @notice invVvoteThreshold threshold.\n    /// @notice voteThreshold is the percentage of cap from which votes starts to count for governance proposals.\n    /// @dev inverse of the threshold to apply.\n    /// Example: th = 5% => (1/5) * 100 => invVoteThreshold = 20\n    /// Example 2: th = 3.03% => (1/3.03) * 100 => invVoteThreshold = 33\n    /// Formula is invVoteThreshold = (1 / th) * 100\n    uint256 public invVoteThreshold;\n\n    /// @notice percent of rewards to veRVRS holders,\n    /// @notice rest of rewards allocated by RVRS staked\n    /// @dev in bips, i.e 100 = 1%\n    uint256 public constant percVeRvrsReward = 3333;\n    uint256 public constant TOTAL_PERC = 10000;\n\n    /// @notice user info mapping\n    mapping(address => UserInfo) public userInfo;\n\n    /// @notice user mapping for allowing auto-stake\n    mapping(address => bool) public authorized;\n\n    /// @notice events describing staking, unstaking and claiming\n    event Staked(address indexed user, uint256 indexed amount);\n    event Unstaked(address indexed user, uint256 indexed amount, uint256 fee);\n    event Claimed(address indexed user, uint256 indexed amount, bool autostake);\n\n    event RewardsStarted(address indexed user);\n    event UpdateMaxCap(uint256 indexed oldCap, uint256 indexed newCap);\n    event UpdateAuthorized(address indexed user, bool isAuth);\n    event UpdateWithdrawFee(uint256 indexed oldFee, uint256 indexed newFee);\n    event UpdateWithdrawFeeTime(uint256 indexed oldFeeTime, uint256 indexed newFeeTime);\n    event UpdateGenerationRate(uint256 indexed oldRate, uint256 indexed newRate);\n    event UpdateInitialDepositMint(uint256 indexed oldAmount, uint256 indexed newAmount);\n\n    event UpdateInvVoteThreshold(uint256 indexed oldThresold, uint256 indexed newThresold);\n\n    function initialize(\n        IERC20 _rvrs,\n        IMasterchef _masterchef,\n        address _rvrsDAO,\n        uint256 _pid\n    ) public initializer {\n        require(address(_masterchef) != address(0), 'zero address');\n        require(address(_rvrs) != address(0), 'zero address');\n        require(_rvrsDAO != address(0), 'zero address');\n\n        // Initialize veRvrs\n        __ERC20_init('veRVRS', 'veRVRS');\n        __Ownable_init();\n        masterchef = _masterchef;\n        rvrs = _rvrs;\n        rvrsDAO = _rvrsDAO;\n        pid = _pid;\n\n        // Setup initial variables\n        maxCap = 4;\n        initialDepositMint = 50; // in bips 0.5%\n        withdrawFee = 500; // in bips\n        generationRate = 385802469135;\n        invVoteThreshold = 20;\n        withdrawFeeTime = 14 days;\n        rewardsStarted = false;\n    }\n\n    /**\n     * @dev pause pool, restricting certain operations\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev unpause pool, enabling certain operations\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n    * @dev start rewards for everyone\n     */\n    function startRewards() external onlyOwner {\n        require(!rewardsStarted, 'rewards already started');\n        rewardsStarted = true;\n        emit RewardsStarted(msg.sender);\n    }\n\n    /// @notice sets maxCap\n    /// @param _maxCap the new max ratio\n    /// @dev WARNING - if you lower this, there's no way to reduce it for people over the cap\n    function setMaxCap(uint256 _maxCap) external onlyOwner {\n        require(_maxCap != 0, 'max cap cannot be zero');\n        require(invVoteThreshold <= _maxCap * 100, 'invVoteThreshold must be less than maxCap');\n        uint256 oldCap = maxCap;\n        maxCap = _maxCap;\n        emit UpdateMaxCap(oldCap, _maxCap);\n    }\n\n    /// @notice sets authorized for auto-staking\n    /// @param _addr - staking contract\n    /// @param _isAuth - bool\n    function setAuthorized(address _addr, bool _isAuth) external onlyOwner {\n        authorized[_addr] = _isAuth;\n        emit UpdateAuthorized(_addr, _isAuth);\n    }\n\n    /// @notice sets withdrawFee\n    /// @param _withdrawFee the new withdraw fee\n    function setWithdrawFee(uint256 _withdrawFee) external onlyOwner {\n        require(_withdrawFee <= MAX_WITHDRAW_FEE, 'withdraw fee too high');\n        uint256 oldFee = withdrawFee;\n        withdrawFee = _withdrawFee;\n        emit UpdateWithdrawFee(oldFee, _withdrawFee);\n    }\n\n    /// @notice sets initialDepositMint\n    /// @param _initialDepositMint the new initial deposit mint %\n    function setInitialDepositMint(uint256 _initialDepositMint) external onlyOwner {\n        require(_initialDepositMint > 0, 'initial mint too low');\n        require(_initialDepositMint <= 1000, 'initial mint too high');\n        uint256 oldAmount = initialDepositMint;\n        initialDepositMint = _initialDepositMint;\n        emit UpdateInitialDepositMint(oldAmount, _initialDepositMint);\n    }\n\n    /// @notice sets withdrawFeeTime\n    /// @param _withdrawFeeTime the new time\n    function setWithdrawFeeTime(uint256 _withdrawFeeTime) external onlyOwner {\n        require(_withdrawFeeTime <= MAX_WITHDRAW_FEE_TIME, 'bad withdraw fee time');\n        uint256 oldTime = withdrawFeeTime;\n        withdrawFeeTime = _withdrawFeeTime;\n        emit UpdateWithdrawFeeTime(oldTime, _withdrawFeeTime);\n    }\n\n    /// @notice sets generation rate\n    /// @param _generationRate the new generation rate\n    function setGenerationRate(uint256 _generationRate) external onlyOwner {\n        require(_generationRate != 0, 'generation rate cannot be zero');\n        require(_generationRate <= MAX_GENERATION_RATE, 'generation too high');\n        uint256 oldRate = generationRate;\n        generationRate = _generationRate;\n        emit UpdateGenerationRate(oldRate, _generationRate);\n    }\n\n    /// @notice sets invVoteThreshold\n    /// @param _invVoteThreshold the new var\n    /// Formula is invVoteThreshold = (1 / th) * 100\n    function setInvVoteThreshold(uint256 _invVoteThreshold) external onlyOwner {\n        // onwner should set a high value if we do not want to implement an important threshold\n        require(_invVoteThreshold != 0, 'invVoteThreshold cannot be zero');\n        require(_invVoteThreshold <= maxCap * 100, 'invVoteThreshold must be less than maxCap');\n        uint256 oldInvVoteThreshold = invVoteThreshold;\n        invVoteThreshold = _invVoteThreshold;\n        emit UpdateInvVoteThreshold(oldInvVoteThreshold, _invVoteThreshold);\n    }\n\n    /// @notice checks whether user _addr has rvrs staked\n    /// @param _addr the user address to check\n    /// @return true if the user has rvrs in stake, false otherwise\n    function isUser(address _addr) public view override returns (bool) {\n        return userInfo[_addr].amount > 0;\n    }\n\n    /// @notice returns staked amount of rvrs for user\n    /// @param _addr the user address to check\n    /// @return staked amount of rvrs\n    function getStakedRvrs(address _addr) external view override returns (uint256) {\n        return userInfo[_addr].amount;\n    }\n\n    /// @dev explicity override multiple inheritance\n    function totalSupply() public view override(VeERC20Upgradeable, IVeERC20) returns (uint256) {\n        return super.totalSupply();\n    }\n\n    /// @dev explicity override multiple inheritance\n    function balanceOf(address account) public view override(VeERC20Upgradeable, IVeERC20) returns (uint256) {\n        return super.balanceOf(account);\n    }\n\n    /// @notice deposits RVRS into contract\n    /// @param _amount the amount of rvrs to deposit\n    /// @param _restakeRewards the amount of rvrs to deposit\n    function deposit(uint256 _amount, bool _restakeRewards) external override nonReentrant whenNotPaused {\n        require(_amount > 0, 'amount to deposit cannot be zero');\n        _deposit(_amount, msg.sender, _restakeRewards);\n    }\n\n    /// @notice deposits RVRS into contract\n    /// @param _amount the amount of rvrs to deposit\n    /// @param _to the user to deposit for\n    function enter(uint256 _amount, address _to) external nonReentrant whenNotPaused {\n        require(_amount > 0, 'amount to deposit cannot be zero');\n        require(authorized[msg.sender], 'not authorized');\n        _deposit(_amount, _to, true);\n    }\n\n    function _deposit(uint256 _amount, address _to, bool _restakeRewards) internal {\n        _update();\n        if (isUser(_to)) {\n            // if user exists, first, claim their rewards\n            _claim(_to, _restakeRewards);\n            // then, increment their holdings\n            userInfo[_to].amount += _amount;\n        } else {\n            // add new user to mapping\n            userInfo[_to].amount = _amount;\n            userInfo[_to].lastClaim = block.timestamp;\n        }\n        // mint an initial amount of veRVRS after claiming rewards\n        _mintInitialOnDeposit(_to, _amount);\n\n        // sync reward debts after deposits and mints\n        userInfo[_to].rewardDebt = userInfo[_to].amount.mul(accRewardPerShare).div(ACC_REWARD_PRECISION);\n        userInfo[_to].rewardDebtVeRvrs = balanceOf(_to).mul(accRewardPerVeShare).div(ACC_REWARD_PRECISION);\n        userInfo[_to].lastDeposit = block.timestamp;\n\n        // Get rvrs from user\n        totalStaked += _amount;\n        rvrs.safeTransferFrom(msg.sender, address(this), _amount);\n        emit Staked(_to, _amount);\n    }\n\n    /// @notice claims accumulated rvrs and veRvrs\n    /// @param _restakeRewards whether to re-stake the accumulated RVRS\n    function claim(bool _restakeRewards) external override nonReentrant whenNotPaused {\n        require(rewardsStarted, 'rewards not started yet');\n        require(isUser(msg.sender), 'user has no stake');\n        UserInfo storage user = userInfo[msg.sender];\n\n        _update();\n        _claim(msg.sender, _restakeRewards);\n        // Update reward debts AFTER minting veRVRS\n        user.rewardDebt = user.amount.mul(accRewardPerShare).div(ACC_REWARD_PRECISION);\n        user.rewardDebtVeRvrs = balanceOf(msg.sender).mul(accRewardPerVeShare).div(ACC_REWARD_PRECISION);\n    }\n\n    function _mintInitialOnDeposit(address _to, uint256 _amount) internal {\n        uint256 initialMint = _amount.mul(initialDepositMint).div(TOTAL_PERC);\n        _mint(_to, initialMint);\n    }\n\n    /// @dev private update function\n    /// @notice This works like a masterchef updatePool function\n    /// @notice This will harvest rewards and update the accumulated Rewards\n    function _update() private {\n        if (!rewardsStarted) {\n            return;\n        }\n        if (block.timestamp <= lastRewardTime) {\n            return;\n        }\n        if (totalStaked == 0) {\n            lastRewardTime = block.timestamp;\n            return;\n        }\n        uint256 amountBefore = rvrs.balanceOf(address(this));\n        IMasterchef(masterchef).harvest(pid, address(this));\n        uint256 reward = rvrs.balanceOf(address(this)).sub(amountBefore);\n        totalRewardsClaimed += reward;\n        if (reward == 0) {\n            lastRewardTime = block.timestamp;\n            return;\n        }\n        uint256 accReward = reward.mul( ACC_REWARD_PRECISION );\n\n        // increment accumulated rewards\n        accRewardPerShare += accReward.mul(TOTAL_PERC.sub(percVeRvrsReward)).div(TOTAL_PERC).div(totalStaked);\n        accRewardPerVeShare += accReward.mul(percVeRvrsReward).div(TOTAL_PERC).div(totalSupply());\n        lastRewardTime = block.timestamp;\n    }\n\n    function accRewardPerShareNow() public view returns (uint256) {\n        // Have to do 90% since masterchef doesn't account for it\n        uint256 pendingTotal = IMasterchef(masterchef).pendingReward(pid, address(this)).mul(ACC_REWARD_PRECISION).mul(9).div(10);\n        return accRewardPerShare + pendingTotal.mul(TOTAL_PERC.sub(percVeRvrsReward)).div(TOTAL_PERC).div(totalStaked);\n    }\n\n    function accRewardPerVeShareNow() public view returns (uint256) {\n        // Have to do 90% since masterchef doesn't account for it\n        uint256 pendingTotal = IMasterchef(masterchef).pendingReward(pid, address(this)).mul(ACC_REWARD_PRECISION).mul(9).div(10);\n        return accRewardPerVeShare + pendingTotal.mul(percVeRvrsReward).div(TOTAL_PERC).div(totalSupply());\n    }\n\n    /// @dev pending RVRS rewards if they claim\n    /// @param _user the address of the user\n    function pendingRewards(address _user) external view returns (uint256) {\n        UserInfo storage user = userInfo[_user];\n        if (user.amount == 0) {\n            return 0;\n        }\n        uint256 pending = user.amount.mul(accRewardPerShareNow()).div(ACC_REWARD_PRECISION).sub(user.rewardDebt);\n        pending += balanceOf(_user).mul(accRewardPerVeShareNow()).div(ACC_REWARD_PRECISION).sub(user.rewardDebtVeRvrs);\n        return pending;\n    }\n\n    /// @dev private claim function\n    /// @param _user the address of the user to claim from\n    /// @param _restakeRewards whether to re-stake the accumulated RVRS\n    function _claim(address _user, bool _restakeRewards) private {\n        if (!rewardsStarted) {\n            return;\n        }\n        uint256 amount = _claimable(_user);\n        UserInfo storage user = userInfo[_user];\n\n        // update last claim time\n        user.lastClaim = block.timestamp;\n\n        // Send pending rewards before minting\n        uint256 pending = user.amount.mul(accRewardPerShare).div(ACC_REWARD_PRECISION).sub(user.rewardDebt);\n        pending += balanceOf(_user).mul(accRewardPerVeShare).div(ACC_REWARD_PRECISION).sub(user.rewardDebtVeRvrs);\n\n        if (amount > 0) {\n            _mint(_user, amount);\n        }\n\n        if (pending > 0) {\n            if (_restakeRewards) {\n                // Re-stake pending rvrs\n                _autostake(pending, _user);\n            } else {\n                rvrs.safeTransfer(_user, pending);\n            }\n        }\n        emit Claimed(_user, pending, _restakeRewards);\n    }\n\n    function _autostake(uint256 _amount, address _to) internal {\n        // then, increment their holdings\n        userInfo[_to].amount += _amount;\n        userInfo[_to].lastDeposit = block.timestamp;\n        // mint an initial amount of veRVRS after claiming rewards\n        _mintInitialOnDeposit(_to, _amount);\n        // already have tokens here so no transfers\n        totalStaked += _amount;\n    }\n\n    /// @notice Calculate the amount of veRvrs that can be claimed by user\n    /// @param _user the address to check\n    /// @return amount of veRvrs that can be claimed by user\n    function claimable(address _user) external view returns (uint256) {\n        require(_user != address(0), 'zero address');\n        return _claimable(_user);\n    }\n\n    /// @dev private claim function\n    /// @param _user the address of the user to claim from\n    function _claimable(address _user) private view returns (uint256) {\n        UserInfo storage user = userInfo[_user];\n\n        // get seconds elapsed since last claim\n        uint256 secondsElapsed = block.timestamp - user.lastClaim;\n\n        // calculate pending amount\n        uint256 pending = user.amount.mul(secondsElapsed).mul(generationRate).div(1e18);\n\n        // get user's veRvrs balance\n        uint256 userVeRvrsBalance = balanceOf(_user);\n\n        // user veRvrs balance cannot go above user.amount * maxCap\n        uint256 maxveRvrsCap = user.amount * maxCap;\n\n        // first, check that user hasn't reached the max limit yet\n        if (userVeRvrsBalance < maxveRvrsCap) {\n            // then, check if pending amount will make user balance overpass maximum amount\n            if ((userVeRvrsBalance + pending) > maxveRvrsCap) {\n                return maxveRvrsCap - userVeRvrsBalance;\n            } else {\n                return pending;\n            }\n        }\n        return 0;\n    }\n\n    /// @notice withdraws staked rvrs\n    /// @param _amount the amount of rvrs to unstake\n    /// Note Beware! you will lose all of your veRvrs if you unstake any amount of rvrs!\n    function withdraw(uint256 _amount) external override nonReentrant whenNotPaused {\n        require(_amount > 0, 'amount to withdraw cannot be zero');\n        require(userInfo[msg.sender].amount >= _amount, 'not enough balance');\n        UserInfo storage user = userInfo[msg.sender];\n        // update and claim first\n        _update();\n        _claim(msg.sender, false);\n\n        // update his balance before burning or sending back rvrs\n        user.amount -= _amount;\n\n        // get user veRvrs balance that must be burned\n        uint256 userVeRvrsBalance = balanceOf(msg.sender);\n\n        _burn(msg.sender, userVeRvrsBalance);\n\n        totalStaked -= _amount;\n        uint256 fee = 0;\n        if (withdrawFee > 0) {\n            if (block.timestamp - user.lastDeposit < withdrawFeeTime) {\n                fee = _amount.mul(withdrawFee).div(TOTAL_PERC);\n                if (fee > 0) {\n                    _amount = _amount.sub(fee);\n                    rvrs.safeTransfer(rvrsDAO, fee);\n                }\n            }\n        }\n        // Update reward debts AFTER updating rvrs balance\n        user.rewardDebt =  user.amount.mul(accRewardPerShare).div(ACC_REWARD_PRECISION);\n        user.rewardDebtVeRvrs = 0;\n\n        // send back the staked rvrs\n        rvrs.safeTransfer(msg.sender, _amount);\n        emit Unstaked(msg.sender, _amount, fee);\n    }\n\n    /// @notice get votes for veRvrs\n    /// @dev votes should only count if account has > threshold% of current cap reached\n    /// @dev invVoteThreshold = (1/threshold%)*100\n    /// @return the valid votes\n    function getVotes(address _account) external view virtual override returns (uint256) {\n        uint256 veRvrsBalance = balanceOf(_account);\n\n        // check that user has more than voting threshold of maxCap and has rvrs in stake\n        if (veRvrsBalance * invVoteThreshold > userInfo[_account].amount * maxCap && isUser(_account)) {\n            return veRvrsBalance;\n        } else {\n            return 0;\n        }\n    }\n\n    function recoverToken(address tokenAddress) external onlyOwner {\n        require(tokenAddress != address(rvrs), \"cannot withdraw RVRS\");\n        IERC20(tokenAddress).transfer(msg.sender, IERC20(tokenAddress).balanceOf(address(this)));\n    }\n}"
      },
      "ReentrancyGuardUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
      },
      "Initializable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
      },
      "PausableUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"ContextUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
      },
      "ContextUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
      },
      "OwnableUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"ContextUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
      },
      "SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\nimport \"Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
      },
      "IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
      },
      "Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
      },
      "SafeMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
      },
      "VeERC20Upgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"ContextUpgradeable.sol\";\nimport \"Initializable.sol\";\nimport \"IVeERC20.sol\";\n\n/// @title VeERC20Upgradeable\n/// @notice Modified version of ERC20Upgradeable where transfers and allowances are disabled.\n/// @dev only minting and burning are allowed. The hook _afterTokenOperation is called after Minting and Burning.\ncontract VeERC20Upgradeable is Initializable, ContextUpgradeable, IVeERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    /**\n     * @dev Emitted when `value` tokens are burned and minted\n     */\n    event Burn(address indexed account, uint256 value);\n    event Mint(address indexed beneficiary, uint256 value);\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), 'ERC20: mint to the zero address');\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Mint(account, amount);\n\n        _afterTokenOperation(account, _balances[account]);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), 'ERC20: burn from the zero address');\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, 'ERC20: burn amount exceeds balance');\n    unchecked {\n        _balances[account] = accountBalance - amount;\n    }\n        _totalSupply -= amount;\n\n        emit Burn(account, amount);\n\n        _afterTokenOperation(account, _balances[account]);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any minting and burning.\n     * @param account the account being affected\n     * @param newBalance newBalance after operation\n     */\n    function _afterTokenOperation(address account, uint256 newBalance) internal virtual {}\n\n    uint256[45] private __gap;\n}"
      },
      "IVeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IVeERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n}"
      },
      "IMasterchef.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface IMasterchef {\n    function deposit ( uint256 _pid, uint256 _amount, address _to, address referral ) external;\n    function emergencyWithdraw ( uint256 _pid ) external;\n    function harvest ( uint256 _pid, address _to ) external;\n    function pendingReward ( uint256 _pid, address _user ) external view returns ( uint256 );\n    function userInfo ( uint256, address ) external view returns ( uint256 amount, uint256 rewardDebt, uint256 nextHarvestUntil, uint256 depositTimerStart, uint firstDepositTime, uint lastDepositTime, uint lastWithdrawTime);\n    function withdraw ( uint256 _pid, uint256 _amount, address _to ) external;\n}"
      },
      "IVeRvrs.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"IVeERC20.sol\";\n\n/**\n * @dev Interface of the VePtp\n */\ninterface IVeRvrs is IVeERC20 {\n    function isUser(address _addr) external view returns (bool);\n\n    function deposit(uint256 _amount, bool _restakeRewards) external;\n\n    function claim(bool _restakeRewards) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function getStakedRvrs(address _addr) external view returns (uint256);\n\n    function getVotes(address _account) external view returns (uint256);\n}"
      }
    },
    "settings": {
      "evmVersion": "istanbul",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "libraries": {
        "veRVRS.sol": {}
      }
    }
  },
  "contract_name": "VeRvrs",
  "compiler_version": "0.8.9+commit.e5eed63a",
  "optimizer_enabled": true,
  "optimizer_runs": 200,
  "license_identifier": "MIT",
  "bytecode_len": 23932
}